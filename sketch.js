const canvasSketch = require('canvas-sketch');
const { lerp } = require('canvas-sketch-util/math');
const random = require('canvas-sketch-util/random');
const palettes = require('nice-color-palettes');

const settings = {
  dimensions: [2048, 2048]
};

const sketch = () => {
  // rangeFloor = the min is inclusive and the max is exclusive so if we want to get between 1 and 5 we pass 6
  const colorCount = random.rangeFloor(2, 6);
  const palette = random.shuffle(random.pick(palettes)).slice(0, 5);
  const backgroundColor = random.shuffle(random.pick(palettes)).slice(0, 1);
  const symbols = ['%', "/", "*", "^", "&", "~"];
  const names = ['alan', "katie"];

  const createGrid = () => {
    // points coordinates
    const points = [];
    // how mane up and down
    const count = 100;
    for (x = 0; x < count; x++) {
      for (y = 0; y < count; y++) {
        // get a value between 0 and 1
        // update the mapping of the u/v to fit the entire grid by removing one from count otherwise the grid will never hit the right edge
        // adds case for count less than one so it can improve the functionality
        const u = count <= 1 ? 0.5 : x / (count - 1);
        const v = count <= 1 ? 0.5 : y / (count - 1);
        const radius = random.noise2D(u, v);
        points.push({
          fillColor: random.pick(palette),
          // Gaussian distribution is between -3.5 and 3.5
          // Since we can't have a negative radius we use Math.abs to
          // wrap the random function
          // radius: Math.abs(random.gaussian() * 0.01),
          radius: Math.abs(radius * 0.05),
          rotation: random.noise2D(u, v) * 1,
          position: [u, v], 
          name: random.pick(symbols)
        });
      }
    }
    return points;
  };

  // random.setSeed(27091990);
  // gridPoiints are generated by createGrid()
  // from the gridPoints array we randomly remove points using the
  // random.value(function) which used a predefined seed
  const gridPoints = createGrid().filter(() => random.value() > 0.001);

  // defined the amount of margin used below in the lerping
  const margin = 200;

  return ({ context, width, height }) => {
    context.fillStyle = backgroundColor;
    context.fillRect(0, 0, width, height);

    gridPoints.forEach(({ position, radius, fillColor, rotation, name }) => {
      // maps the grid points to the x,y coordinates on the screen
      // using lerp here to introduce a margin around the grid
      const [u, v] = position;
      const x = lerp(margin, width - margin, u);
      const y = lerp(margin, height - margin, v);
      context.save();
      context.beginPath();
      // draws the circles
      // context.arc(x, y, radius * width, 0, 2 * Math.PI, false);
      // context.strokeStyle = '#cecece';
      // context.lineWidth = 10;
      // context.stroke();
      context.fillStyle = fillColor;
      // context.fill();
      context.font = `${radius * width}px "Arial"`;
      context.translate(x, y);
      context.rotate(rotation);
      // context.fillText('=', x, y);
      context.fillText(`${name}`, 0, 0);
      context.restore();
    });
  };
};

canvasSketch(sketch, settings);
